import { PropsWithChildren } from "react";
import { twMerge } from "tailwind-merge";
import grainImage from "../assets/images/grain.jpg";

export const Card = ({
  className,
  children,
}: PropsWithChildren<{ className?: string }>) => {
  return (
    <div className="relative rounded-3xl p-[2px] overflow-hidden">
      {/* Animated conic border background */}
      <div className="absolute inset-0 z-0 animate-spin-slow bg-[conic-gradient(from_90deg_at_50%_50%,#E2CBFF_0%,#393BB2_50%,#E2CBFF_100%)]" />

      {/* Actual card content */}
      <div
        className={twMerge(
          `bg-slate-800 relative z-10 rounded-3xl overflow-hidden 
           after:z-10 after:content-[''] after:absolute
           after:inset-0 
           after:outline-2 after:outline after:-outline-offset-2  
           after:rounded-3xl after:outline-white/20 
           after:pointer-events-none p-6`,
          className
        )}
      >
        <div
          className="absolute inset-0 -z-10 opacity-5"
          style={{ backgroundImage: `url(${grainImage.src})` }}
        />
        {children}
      </div>
    </div>
  );
};























import { PropsWithChildren } from "react";
import { twMerge } from "tailwind-merge";
import grainImage from "../assets/images/grain.jpg";

export const Card = ({
  className,
  children,
}: PropsWithChildren<{ className?: string }>) => {
  return (
    <div
      className={twMerge(
        `bg-slate-800 rounded-3xl relative z-0
         overflow-hidden 
         after:z-10 after:content-[''] after:absolute
          after:inset-0 
         after:outline-2 after:outline after:-outline-offset-2  
         after:rounded-3xl after:outline-white/20 
         after:pointer-events-none p-6`,
        className
      )}
    >
      <div
        className="absolute inset-0 -z-10 opacity-5"
        style={{ backgroundImage: `url(${grainImage.src})` }}
      />
      {children}
    </div>
  );
};
















 <Card className="h-[320px] p-0">
          <Image src={mapImage} alt="map" />
          <Image src={smileEmoji} alt="smile" />
        </Card>

























        "use client";

import React, { useState } from "react";
import { motion, useMotionValue, useSpring } from "framer-motion";
import Project from "./Project";
import { myProjects } from "@/data";

const Projects = () => {
  const x = useMotionValue(0);
  const y = useMotionValue(0);
  const springX = useSpring(x, { damping: 10, stiffness: 50 });
  const springY = useSpring(y, { damping: 10, stiffness: 50 });

  const [preview, setPreview] = useState<string | null>(null);

  const handleMouseMove = (e: React.MouseEvent) => {
    x.set(e.clientX + 20);
    y.set(e.clientY + 20);
  };

  return (
    <div className="mt-0 ">
    <section
      onMouseMove={handleMouseMove}
      className="relative c-space section-spacing"
    >
       <h2 className="heading ">
        My {" "}
        <span className="text-purple">Certificates</span>
      </h2>
      <div className="bg-gradient-to-r from-transparent via-neutral-700 to-transparent mt-24 h-[1px] w-full" />
      {myProjects.map((project) => (
        <Project key={project.id} {...project} setPreview={setPreview} />
      ))}
      {preview && (
        <motion.img
          className="fixed top-0 left-0 z-50 object-cover h-56 rounded-lg shadow-lg pointer-events-none w-80"
          src={preview}
          style={{ x: springX, y: springY }}
        />
      )}
    </section>
    </div>
  );
};

export default Projects;
